diff --git a/src/bthread/mutex.cpp b/src/bthread/mutex.cpp
index 0de00b2..650f877 100644
--- a/src/bthread/mutex.cpp
+++ b/src/bthread/mutex.cpp
@@ -655,36 +655,25 @@ inline int mutex_timedlock_contended(
 #ifdef BTHREAD_USE_FAST_PTHREAD_MUTEX
 namespace internal {
 
-int FastPthreadMutex::lock_contended() {
-    butil::atomic<unsigned>* whole = (butil::atomic<unsigned>*)&_futex;
-    while (whole->exchange(BTHREAD_MUTEX_CONTENDED) & BTHREAD_MUTEX_LOCKED) {
-        if (futex_wait_private(whole, BTHREAD_MUTEX_CONTENDED, NULL) < 0
-            && errno != EWOULDBLOCK) {
-            return errno;
-        }
-    }
-    return 0;
+FastPthreadMutex::FastPthreadMutex()
+{
+    pthread_mutexattr_t attr;
+    pthread_mutexattr_init(&attr);
+    pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ADAPTIVE_NP);
+    pthread_mutex_init(&_mutex, &attr);
+    pthread_mutexattr_destroy(&attr);
 }
 
 void FastPthreadMutex::lock() {
-    bthread::MutexInternal* split = (bthread::MutexInternal*)&_futex;
-    if (split->locked.exchange(1, butil::memory_order_acquire)) {
-        (void)lock_contended();
-    }
+    pthread_mutex_lock(&_mutex);
 }
 
 bool FastPthreadMutex::try_lock() {
-    bthread::MutexInternal* split = (bthread::MutexInternal*)&_futex;
-    return !split->locked.exchange(1, butil::memory_order_acquire);
+    return pthread_mutex_trylock(&_mutex) == 0;
 }
 
 void FastPthreadMutex::unlock() {
-    butil::atomic<unsigned>* whole = (butil::atomic<unsigned>*)&_futex;
-    const unsigned prev = whole->exchange(0, butil::memory_order_release);
-    // CAUTION: the mutex may be destroyed, check comments before butex_create
-    if (prev != BTHREAD_MUTEX_LOCKED) {
-        futex_wake_private(whole, 1);
-    }
+    pthread_mutex_unlock(&_mutex);
 }
 
 } // namespace internal
diff --git a/src/bthread/mutex.h b/src/bthread/mutex.h
index a1c8ec0..2aec3a7 100644
--- a/src/bthread/mutex.h
+++ b/src/bthread/mutex.h
@@ -19,6 +19,8 @@
 #ifndef  BTHREAD_MUTEX_H
 #define  BTHREAD_MUTEX_H
 
+#include <pthread.h>
+
 #include "bthread/types.h"
 #include "butil/scoped_lock.h"
 #include "bvar/utils/lock_timer.h"
@@ -68,15 +70,14 @@ namespace internal {
 #ifdef BTHREAD_USE_FAST_PTHREAD_MUTEX
 class FastPthreadMutex {
 public:
-    FastPthreadMutex() : _futex(0) {}
-    ~FastPthreadMutex() {}
+    FastPthreadMutex();
+    ~FastPthreadMutex() { pthread_mutex_destroy(&_mutex); }
     void lock();
     void unlock();
     bool try_lock();
 private:
     DISALLOW_COPY_AND_ASSIGN(FastPthreadMutex);
-    int lock_contended();
-    unsigned _futex;
+    pthread_mutex_t _mutex;
 };
 #else
 typedef butil::Mutex FastPthreadMutex;
